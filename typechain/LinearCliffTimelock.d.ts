/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LinearCliffTimelockInterface extends ethers.utils.Interface {
  functions: {
    "balance()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "cliffEdge()": FunctionFragment;
    "cliffEnd()": FunctionFragment;
    "cliffStart()": FunctionFragment;
    "cliffTimePeriod()": FunctionFragment;
    "initialize(address,uint256,address,address,uint256,uint256,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "token()": FunctionFragment;
    "totalLocked()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cliffEdge", values?: undefined): string;
  encodeFunctionData(functionFragment: "cliffEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cliffStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cliffTimePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cliffEdge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cliffEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cliffStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OnInitialized(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "OnWithdraw(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnWithdraw"): EventFragment;
}

export type OnInitializedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    beneficiary: string;
    token: string;
    amount: BigNumber;
    cliffStart: BigNumber;
    cliffEnd: BigNumber;
    cliffTimePeriod: BigNumber;
  }
>;

export type OnWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber] & { amount: BigNumber; next: BigNumber }
>;

export class LinearCliffTimelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LinearCliffTimelockInterface;

  functions: {
    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    cliffEdge(overrides?: CallOverrides): Promise<[BigNumber]>;

    cliffEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    cliffStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    cliffTimePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _token: string,
      _amount: BigNumberish,
      _sender: string,
      _beneficiary: string,
      _cliffStart: BigNumberish,
      _cliffEnd: BigNumberish,
      _cliffTimePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  cliffEdge(overrides?: CallOverrides): Promise<BigNumber>;

  cliffEnd(overrides?: CallOverrides): Promise<BigNumber>;

  cliffStart(overrides?: CallOverrides): Promise<BigNumber>;

  cliffTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _token: string,
    _amount: BigNumberish,
    _sender: string,
    _beneficiary: string,
    _cliffStart: BigNumberish,
    _cliffEnd: BigNumberish,
    _cliffTimePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    cliffEdge(overrides?: CallOverrides): Promise<BigNumber>;

    cliffEnd(overrides?: CallOverrides): Promise<BigNumber>;

    cliffStart(overrides?: CallOverrides): Promise<BigNumber>;

    cliffTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _amount: BigNumberish,
      _sender: string,
      _beneficiary: string,
      _cliffStart: BigNumberish,
      _cliffEnd: BigNumberish,
      _cliffTimePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OnInitialized(address,address,uint256,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      token?: string | null,
      amount?: BigNumberish | null,
      cliffStart?: null,
      cliffEnd?: null,
      cliffTimePeriod?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        beneficiary: string;
        token: string;
        amount: BigNumber;
        cliffStart: BigNumber;
        cliffEnd: BigNumber;
        cliffTimePeriod: BigNumber;
      }
    >;

    OnInitialized(
      beneficiary?: string | null,
      token?: string | null,
      amount?: BigNumberish | null,
      cliffStart?: null,
      cliffEnd?: null,
      cliffTimePeriod?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        beneficiary: string;
        token: string;
        amount: BigNumber;
        cliffStart: BigNumber;
        cliffEnd: BigNumber;
        cliffTimePeriod: BigNumber;
      }
    >;

    "OnWithdraw(uint256,uint256)"(
      amount?: BigNumberish | null,
      next?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; next: BigNumber }
    >;

    OnWithdraw(
      amount?: BigNumberish | null,
      next?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; next: BigNumber }
    >;
  };

  estimateGas: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    cliffEdge(overrides?: CallOverrides): Promise<BigNumber>;

    cliffEnd(overrides?: CallOverrides): Promise<BigNumber>;

    cliffStart(overrides?: CallOverrides): Promise<BigNumber>;

    cliffTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _amount: BigNumberish,
      _sender: string,
      _beneficiary: string,
      _cliffStart: BigNumberish,
      _cliffEnd: BigNumberish,
      _cliffTimePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliffEdge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliffEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliffStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliffTimePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _amount: BigNumberish,
      _sender: string,
      _beneficiary: string,
      _cliffStart: BigNumberish,
      _cliffEnd: BigNumberish,
      _cliffTimePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
